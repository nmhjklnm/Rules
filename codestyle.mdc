---
description: 项目风格规范
alwaysApply: true
---
# 🎯 项目风格规范

## 代码风格与结构
- **禁止 monkeypatch**：避免破坏模块边界。  
- **禁止函数嵌套函数**：提高可读性和可测试性。  
- **无必要不新增实体**：保持模型与代码简洁。  
- **单一职责原则 (SRP)**：每个类/函数只做一件事。  
- **KISS 原则**：尽可能简单，拒绝花哨写法。  
- **YAGNI 原则**：避免实现未来可能用不到的功能。  
- **命名清晰**：命名即文档。  

## 工程与健壮性
- **Fail Fast**：异常/不合法输入立即报错。  
- **明确依赖**：依赖显式声明，不搞隐式耦合。  
- **禁止全局状态共享**：避免单例、全局变量污染。  
- **限制副作用**：函数尽量纯净，避免修改外部状态。  
- **类型安全（Pydantic）**：数据输入输出必须使用强类型校验，禁止动态弱类型绕过。  

## 可维护性
- **DRY 原则**：拒绝复制粘贴逻辑。  
- **模块边界清晰**：不同模块通过接口交互，禁止跨层调用。  
- **注重可测试性**：代码应天然适合单测。  
- **文档化**：新增模块/接口必须有最小文档。  

## 协作与安全
- **默认拒绝隐式魔法**：少用 metaclass、动态 import、黑魔法。  
- **安全优先**：避免不必要的 eval/exec、危险反序列化。  
- **渐进演化**：功能演进要有清晰迁移路径。  

## 设计模式选择
- **优先模式**：工厂、策略、适配器、组合优于继承、轻量依赖注入。  
- **谨慎模式**：观察者/发布订阅（限事件流）、装饰器（避免嵌套）、模板方法。  
- **禁止模式**：单例、过度 MVC/MVP/MVVM、访问者/复杂组合、反射/动态代理。  

## 迭代原则
- **小步快跑**：功能更新若可拆分，必须拆分为多个小步，逐步交付，避免一次性大改。  
- **最小可行 (MVP)**：先做最小可用版本，再逐步完善。  
- **反馈驱动**：尽早拿到用户/测试反馈，而不是闭门造车。  

## 🔍 可观测性与质量保证
- **日志与监控**：核心逻辑必须有日志，保证可追溯性。  
- **错误处理**：必须区分「预期异常」与「系统错误」，避免吞异常。  